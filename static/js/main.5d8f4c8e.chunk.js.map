{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","components/Homepage.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","toolbar","drawerClickHandler","href","sideDrawer","drawerClasses","show","backdrop","HomePage","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","this","style","height","marginTop","Component","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8XAUeA,G,YAPY,SAAAC,GAAK,OAC5B,4BAAQC,UAAY,gBAAgBC,QAASF,EAAMG,OAC/C,yBAAKF,UAAY,uBACjB,yBAAKA,UAAY,uBACjB,yBAAKA,UAAY,0BCeVG,EAlBC,SAAAJ,GAAK,OACjB,4BAAQC,UAAY,WAChB,yBAAKA,UAAY,sBACb,6BACI,kBAAC,EAAD,CAAoBE,MAASH,EAAMK,sBAEvC,yBAAKJ,UAAY,gBAAe,uBAAGK,KAAO,KAAV,sBAChC,yBAAKL,UAAY,WACjB,yBAAKA,UAAY,4BACb,4BACI,4BAAI,uBAAGK,KAAO,oDAAV,aACJ,4BAAI,uBAAGA,KAAO,6BAAV,gBCGTC,G,MAfI,SAAAP,GACf,IAAIQ,EAAgB,cAIpB,OAHIR,EAAMS,OACRD,EAAgB,oBAGd,yBAAKP,UAAaO,GACd,4BACI,4BAAI,uBAAGF,KAAO,oDAAV,aACJ,4BAAI,uBAAGA,KAAO,6BAAV,eCLLI,G,YAJE,SAAAV,GAAK,OACtB,yBAAKC,UAAY,WAAWC,QAAUF,EAAMG,UCoC7BQ,E,4MAjCXC,MAAQ,CACJC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEH,gBAAiBG,EAAUH,oB,EAIxCI,qBAAuB,WACrB,EAAKF,SAAS,CAAEF,gBAAgB,K,uDAGhC,IAAIH,EACAH,EAMJ,OAJIW,KAAKN,MAAMC,iBACbH,EAAW,kBAAC,EAAD,CAAUP,MAAOe,KAAKD,uBACjCV,EAAa,kBAAC,EAAD,OAGb,yBAAKY,MAAO,CAAEC,OAAQ,SACpB,kBAAC,EAAD,CAASf,mBAAoBa,KAAKJ,2BACjCP,EACAG,EACD,0BAAMS,MAAO,CAAEE,UAAW,SACxB,8D,GA7BSC,a,OCKRC,EANF,kBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAaf,M,MCG9BgB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAWC,IAC1B,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d8f4c8e.chunk.js","sourcesContent":["import React from 'react';\nimport './DrawerToggleButton.css';\n\nconst drawerToggleButton = props => (\n    <button className = \"toggle-button\" onClick={props.click}>\n        <div className = \"toggle-button_line\"/>\n        <div className = \"toggle-button_line\"/>\n        <div className = \"toggle-button_line\"/>\n    </button>\n);\nexport default drawerToggleButton;","import React from 'react';\nimport './Toolbar.css';\nimport '../SideDrawer/DrawerToggleButton';\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\nconst toolbar = props => (\n    <header className = \"toolbar\">\n        <nav className = \"toolbar_navigation\">\n            <div>\n                <DrawerToggleButton click = {props.drawerClickHandler}/>\n            </div>\n            <div className = \"toolbar_logo\"><a href = \"/\">Mitch's Portfolio</a></div>\n            <div className = \"spacer\"/>\n            <div className = \"toolbar_navigation-items\">\n                <ul>\n                    <li><a href = \"https://www.linkedin.com/in/mitch-lew-88b67b135/\">Linkedin</a></li>\n                    <li><a href = \"https://github.com/ChuLew\">Github</a></li>\n                </ul>\n            </div>\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\nimport './SideDrawer.css';\n \nconst sideDrawer = props =>{\n    let drawerClasses = 'side-drawer'\n    if (props.show) {\n      drawerClasses = 'side-drawer open'\n    }\n    return(\n        <nav className = {drawerClasses}>\n            <ul>\n                <li><a href = \"https://www.linkedin.com/in/mitch-lew-88b67b135/\">Linkedin</a></li>\n                <li><a href = \"https://github.com/ChuLew\">Github</a></li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default sideDrawer;","import React from 'react';\nimport './Backdrop.css';\n\nconst backdrop = props => (\n<div className = \"backdrop\" onClick ={props.click} ></div>\n\n);\nexport default backdrop;","import React, {Component} from 'react';\nimport Toolbar from \"./Toolbar/Toolbar\";\nimport SideDrawer from './SideDrawer/SideDrawer';\nimport \"./Homepage.css\";\nimport Backdrop from './Backdrop/Backdrop';\nclass HomePage extends Component{\n\n    state = {\n        sideDrawerOpen: false,\n      }\n    \n      drawerToggleClickHandler = () => {\n        this.setState(prevState => {\n          return { sideDrawerOpen: !prevState.sideDrawerOpen }\n        })\n      }\n    \n      backdropClickHandler = () => {\n        this.setState({ sideDrawerOpen: false })\n      }\n      render() {\n        let backdrop\n        let sideDrawer\n    \n        if (this.state.sideDrawerOpen) {\n          backdrop = <Backdrop click={this.backdropClickHandler} />\n          sideDrawer = <SideDrawer />\n        }\n        return (\n          <div style={{ height: '100%' }}>\n            <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n            {sideDrawer}\n            {backdrop}\n            <main style={{ marginTop: '64px' }}>\n              <p>This is the page content!</p>\n            </main>\n          </div>\n        )\n      }\n}\nexport default HomePage;","import React from 'react';\nimport HomePage from \"./Homepage\"\nimport {Switch,Route} from 'react-router-dom';\n\nconst Main = () =>\n (\n    <Switch>\n        <Route exact path = \"/\" component = {HomePage} />\n    </Switch>\n ) \nexport default Main; ","import React from 'react';\nimport Main from './components/main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Main></Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename ={process.env.PUBLIC_URL}>\n  <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}