{"version":3,"sources":["components/Homepage.js","components/Projects.js","components/Main.js","components/Toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","options","skipAddStyles","autoStart","loop","onInit","typewriter","typeString","pauseFor","deleteAll","start","href","rel","target","aria-hidden","to","download","Component","Projects","src","alt","Main","exact","path","component","toolbar","props","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXA8DeA,E,uKArDX,OACI,6BACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAYC,QAAS,CACjBC,eAAe,EACfC,WAAW,EACXC,MAAM,GAERJ,UAAY,aACZK,OAAQ,SAACC,GACLA,EAAWC,WAAW,YACrBC,SAAS,MACTC,YACDH,EAAWC,WAAW,wBACrBC,SAAS,MACTC,YACDH,EAAWC,WAAW,eACrBC,SAAS,KACTC,YACDH,EAAWC,WAAW,iBACrBC,SAAS,KACTC,YACDH,EAAWC,WAAW,qBACrBC,SAAS,KACTC,YACDH,EAAWC,WAAW,iBACrBC,SAAS,KACTC,YACAC,YAIP,yBAAKV,UAAY,gBAEjB,uBAAGW,KAAK,mDAAmDC,IAAI,sBAAsBC,OAAO,UAC1F,uBAAGb,UAAU,wBAAwBc,cAAY,UAInD,uBAAGH,KAAK,4BAA4BC,IAAI,sBAAsBC,OAAO,UACnE,uBAAGb,UAAU,sBAAsBc,cAAY,UAIjD,kBAAC,IAAD,CAAMC,GAAG,sBAAsBF,OAAO,SAASG,UAAQ,GACrD,uBAAGhB,UAAU,aAAac,cAAY,gB,GAhD7BG,aCKRC,G,6KAPP,OACE,6BACI,yBAAKC,IAAI,6EAA6EC,IAAI,uB,GAJjFH,c,OCURI,EAPF,kBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAazB,IACrC,kBAAC,IAAD,CAAOwB,KAAO,YAAYC,UAAaN,MCYhCO,G,YAlBC,SAAAC,GAAK,OACjB,4BAAQ1B,UAAU,WACd,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,4BACX,0CAEJ,yBAAKA,UAAU,WACf,yBAAKA,UAAU,4BACX,4BACI,4BAAI,uBAAGW,KAAK,KAAR,SACJ,4BAAI,kBAAC,IAAD,CAAMI,GAAG,YAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,kBCCTY,MAVf,WACE,OACE,yBAAK3B,UAAY,cACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGgB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAWC,IAC1B,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.746db6c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Homepage.css\";\nimport Typewriter from 'typewriter-effect';\nimport {Link} from 'react-router-dom';\n\n\nclass HomePage extends Component {\n\n  render() {\n    return (\n        <div>\n          <div className=\"center\">\n            <Typewriter options={{\n                skipAddStyles: false,\n                autoStart: true,\n                loop: true,\n              }}\n              className = \"Typewriter\"\n              onInit={(typewriter) => {\n                  typewriter.typeString('Welcome!')\n                  .pauseFor(1500)\n                  .deleteAll()\n                  typewriter.typeString('My Name is Mitch Lew')\n                  .pauseFor(2500)\n                  .deleteAll()\n                  typewriter.typeString('Disciplined')\n                  .pauseFor(100)\n                  .deleteAll()\n                  typewriter.typeString('Goal Oriented')\n                  .pauseFor(100)\n                  .deleteAll()\n                  typewriter.typeString('Software Engineer')\n                  .pauseFor(3000)\n                  .deleteAll()\n                  typewriter.typeString('Stay tuned...')\n                  .pauseFor(1000)\n                  .deleteAll()\n                  .start();\n              }}\n            />\n          </div>\n            <div className = \"social-links\">\n                {/* LinkedIn */}\n            <a href=\"https://www.linkedin.com/in/mitch-lew-88b67b135/\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <i className=\"fa fa-linkedin-square\" aria-hidden=\"true\" />\n            </a>\n\n            {/* Github */}\n            <a href=\"https://github.com/ChuLew\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <i className=\"fa fa-github-square\" aria-hidden=\"true\" />\n            </a>\n\n            {/* Freecodecamp */}\n            <Link to=\"MitchLewResume.docx\" target=\"_blank\" download>\n              <i className=\"fa fa-file\" aria-hidden=\"true\"/>\n            </Link>\n\n            </div>\n          </div>\n    )\n  }\n}\nexport default HomePage;\n\n\n","import React, {Component} from 'react';\nimport \"./Projects.css\";\nclass Projects extends Component{\n      render() {\n        return (\n          <div>\n              <img src=\"https://help.semplice.com/hc/article_attachments/360027392932/projects.gif\" alt=\"projectsImage\" />\n          </div>\n        )\n      }\n}\nexport default Projects;","import React from 'react';\nimport HomePage from \"./Homepage\";\nimport Projects from \"./Projects\";\nimport {Switch,Route} from 'react-router-dom';\n\nconst Main = () =>\n (\n    <Switch>\n        <Route exact path = \"/\" component = {HomePage} />\n        <Route path = \"/projects\" component = {Projects}/>\n    </Switch>\n ) \nexport default Main; ","import React from 'react';\nimport './Toolbar.css';\nimport { Link } from 'react-router-dom';\nconst toolbar = props => (\n    <header className=\"toolbar\">\n        <nav className=\"toolbar_navigation\">\n            <div className=\"toolbar_navigation-items\">\n                <h1>Mitch Lew</h1>\n            </div>\n            <div className=\"spacer\" />\n            <div className=\"toolbar_navigation-items\">\n                <ul>\n                    <li><a href=\"/\">Home</a></li>\n                    <li><Link to=\"projects\">Projects</Link></li>\n                    <li><Link to=\"contact\">Contact</Link></li>\n                </ul>\n            </div>\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\nimport Main from './components/Main';\nimport './App.css';\nimport Toolbar from './components/Toolbar/Toolbar'\n\nfunction App() {\n  return (\n    <div className = \"background\">\n    <Toolbar/>\n    <Main/>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename ={process.env.PUBLIC_URL}>\n  <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}